name: Deploy EKS Cluster

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: Select the environment
        options:
        - dev
        - uat
        - prod

env:
  AWS_REGION: ap-southeast-1

jobs:
  terraform-create-eks-cluster:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./eks

    permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: github-run-id-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init

      - name: Terraform Workspace
        run: |
          terraform workspace select -or-create ${{ github.event.inputs.environment }}
          terraform workspace list

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -var-file=${{ github.event.inputs.environment }}.tfvars

      - name: Terraform Apply
        run: terraform apply -var-file=${{ github.event.inputs.environment }}.tfvars --auto-approve

      - name: Capture Terraform Outputs
        id: terraform_outputs
        run: |
          echo "CLUSTER_NAME=$(terraform output -raw cluster_name)" >> $GITHUB_ENV
          echo "CLUSTER_ENDPOINT=$(terraform output -raw cluster_endpoint)" >> $GITHUB_ENV

      - name: Setup Kubeconfig
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      - name: Update aws-auth ConfigMap with IAM User ARNs
        run: |
          set -x  # Enable shell debugging

          # Convert the environment variable to an array
          IFS=',' read -r -a IAM_USER_ARNS <<< "$IAM_USER_ARNS"

          # Loop through the IAM user ARNs and update aws-auth
          for arn in "${IAM_USER_ARNS[@]}"; do
            echo "Adding ARN: $arn to aws-auth"
            
            # Print out the ARN and the extracted username for debugging
            echo "ARN: $arn"
            echo "Username: ${arn##*/}"
            
            # Get the existing ConfigMap and modify it with yq
            kubectl get configmap aws-auth -n kube-system -o yaml -v=9 | \
              yq eval ".data.mapUsers += \"- userarn: $arn\n  username: ${arn##*/}\n  groups:\n    - system:masters\n\"" > modified_aws_auth.yaml

            # Print the modified YAML to verify changes before applying
            echo "Modified aws-auth ConfigMap:"
            cat modified_aws_auth.yaml

            # Apply the updated ConfigMap
            kubectl apply -f modified_aws_auth.yaml
          done
        env:
          IAM_USER_ARNS: ${{ secrets.IAM_USER_ARNS }}
