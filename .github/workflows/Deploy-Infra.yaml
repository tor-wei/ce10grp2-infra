name: Deploy Infrastructure

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: Select the environment
        options:
        - dev-uat
        - prod

permissions:
  id-token: write
  contents: read
  
env:
  AWS_REGION: ${{ vars.AWS_REGION }}

jobs:
  terraform-deploy-infrastructure:
    runs-on: ubuntu-latest
    outputs:
      cluster_name: ${{ steps.terraform-output.outputs.cluster_name }}
      cluster_endpoint: ${{ steps.terraform-output.outputs.cluster_endpoint }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: github-run-id-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Deploy ECR
        working-directory: ./ecr
        run: |
          terraform init
          terraform workspace select -or-create ${{ github.event.inputs.environment }}
          terraform workspace list
          terraform validate
          terraform plan -var-file=env/${{ github.event.inputs.environment }}.tfvars
          terraform apply -var-file=env/${{ github.event.inputs.environment }}.tfvars --auto-approve

      - name: Deploy EKS
        working-directory: ./eks
        run: |
          terraform init
          terraform workspace select -or-create ${{ github.event.inputs.environment }}
          terraform workspace list
          terraform validate
          terraform plan -var-file=env/${{ github.event.inputs.environment }}.tfvars
          terraform apply -var-file=env/${{ github.event.inputs.environment }}.tfvars --auto-approve

      - name: Capture EKS Outputs
        id: terraform-output
        working-directory: ./eks
        run: |
          echo "cluster_name=$(terraform output -raw cluster_name)" >> $GITHUB_OUTPUT
          echo "cluster_endpoint=$(terraform output -raw cluster_endpoint)" >> $GITHUB_OUTPUT

      - name: Setup Kubeconfig
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ steps.terraform-output.outputs.cluster_name }}

      - name: Setup Cluster Configs
        run: |
          echo "Applying StorageClass manifest..."
          kubectl apply -f ./k8s/cluster-configs/storageclass.yaml

  install-nginx-ingress-controller:
    runs-on: ubuntu-latest
    needs: [terraform-deploy-infrastructure]

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: github-run-id-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Kubeconfig
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ needs.terraform-deploy-infrastructure.outputs.cluster_name }}

      - name: Helm tool installer
        uses: Azure/setup-helm@v4.3.1

      - name: Install NGINX Ingress Controller
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update
          helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
            --atomic \
            --namespace ingress-nginx \
            --create-namespace

  install-external-dns:
    runs-on: ubuntu-latest
    needs: [terraform-deploy-infrastructure, install-nginx-ingress-controller]

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: github-run-id-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Kubeconfig
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ needs.terraform-deploy-infrastructure.outputs.cluster_name }}

      - name: Helm tool installer
        uses: Azure/setup-helm@v4.3.1

      - name: Install ExternalDNS
        run: |
          helm repo add external-dns https://kubernetes-sigs.github.io/external-dns/
          helm repo update
          helm upgrade --install external-dns external-dns/external-dns \
            --atomic \
            --namespace external-dns \
            --create-namespace \
            --set provider.name=aws \
            --set provider.aws.zoneType=public \
            --set serviceAccount.create=true \
            --set serviceAccount.name=external-dns-sa \
            --set txtOwnerId=torwei-cluster \
            --set rbac.create=true \
            --set policy=sync

  install-argo-cd:
    runs-on: ubuntu-latest
    needs: [terraform-deploy-infrastructure, install-nginx-ingress-controller, install-external-dns]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: github-run-id-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Kubeconfig
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ needs.terraform-deploy-infrastructure.outputs.cluster_name }}

      - name: Helm tool installer
        uses: Azure/setup-helm@v4.3.1

      - name: Install ArgoCD
        working-directory: ./k8s/argocd
        run: |
          helm repo add argo https://argoproj.github.io/argo-helm
          helm repo update
          helm upgrade --install argocd argo/argo-cd \
            --namespace argocd --create-namespace \
            --values values-${{ github.event.inputs.environment }}.yaml

      - name: Checkout GitOps repository
        uses: actions/checkout@v4
        with:
          repository: ${{ vars.GITOPS_REPO }}
          path: gitops-repo
          ref: ${{ vars.GITOPS_REPO_BRANCH }}

      - name: Setup app for dev and uat environment
        if: ${{ github.event.inputs.environment == 'dev-uat' }}
        run: |
          echo "Applying dev and uat manifests"
          kubectl apply -f gitops-repo/argocd/dev-app.yaml
          kubectl apply -f gitops-repo/argocd/uat-app.yaml
          echo "Successfully applied dev-uat changes."

      - name: Setup app for prod environment
        if: ${{ github.event.inputs.environment == 'prod' }}
        run: |
          echo "Applying prod manifests"
          kubectl apply -f gitops-repo/argocd/prod-app.yaml
          echo "Successfully applied production changes."


  install-prometheus-grafana:
    runs-on: ubuntu-latest
    needs: [terraform-deploy-infrastructure, install-nginx-ingress-controller, install-external-dns]
    env:
      MONITORING_NAMESPACE: monitoring
      
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: github-run-id-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Kubeconfig
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ needs.terraform-deploy-infrastructure.outputs.cluster_name }}

      - name: Helm tool installer
        uses: Azure/setup-helm@v4.3.1

      - name: Install kube-prometheus-stack
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          helm upgrade --install kube-prometheus-stack prometheus-community/kube-prometheus-stack \
            --namespace $MONITORING_NAMESPACE --create-namespace \
            -f ./monitoring/monitoring-values.yaml \
            --set grafana.adminPassword=${{ secrets.GRAFANA_ADMIN_PASSWORD }}

      - name: Install Loki + Promtail
        run: kubectl apply -f ./monitoring/loki-promtail.yaml
