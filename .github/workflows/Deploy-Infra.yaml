name: Deploy Infrastructure

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: Select the environment
        options:
        - dev-uat
        - prod

permissions:
  id-token: write
  contents: read
  
env:
  AWS_REGION: ${{ vars.AWS_REGION }}

jobs:
  terraform-deploy-infrastructure:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: github-run-id-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Deploy ECR
        working-directory: ./ecr
        run: |
          terraform init
          terraform workspace select -or-create ${{ github.event.inputs.environment }}
          terraform workspace list
          terraform validate
          terraform plan -var-file=env/${{ github.event.inputs.environment }}.tfvars
          terraform apply -var-file=env/${{ github.event.inputs.environment }}.tfvars --auto-approve

      - name: Deploy EKS
        working-directory: ./eks
        run: |
          terraform init
          terraform workspace select -or-create ${{ github.event.inputs.environment }}
          terraform workspace list
          terraform validate
          terraform plan -var-file=env/${{ github.event.inputs.environment }}.tfvars
          terraform apply -var-file=env/${{ github.event.inputs.environment }}.tfvars --auto-approve

      - name: Capture EKS Outputs
        working-directory: ./eks
        run: |
          echo "CLUSTER_NAME=$(terraform output -raw cluster_name)" >> $GITHUB_ENV
          echo "CLUSTER_ENDPOINT=$(terraform output -raw cluster_endpoint)" >> $GITHUB_ENV

      - name: Setup Kubeconfig
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      - name: Setup Cluster Configs
        run: |
          echo "Applying StorageClass manifest..."
          kubectl apply -f ./k8s/cluster-configs/storageclass.yaml

      - name: Helm tool installer
        uses: Azure/setup-helm@v4.3.1

      - name: Add Argo Helm repository
        run: helm repo add argo https://argoproj.github.io/argo-helm

      - name: Update Helm repositories
        run: helm repo update

      - name: Install ArgoCD with Helm
        run: |
          helm upgrade --install argocd argo/argo-cd \
            --namespace argocd --create-namespace \
            --version 7.4.5
            
      - name: Install Prometheus and Grafana via Helm
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo update

          # Prometheus
          helm upgrade --install prometheus prometheus-community/prometheus \
            --namespace monitoring --create-namespace \
            --set server.service.type=LoadBalancer \
            --set alertmanager.service.type=LoadBalancer \
            --set pushgateway.service.type=ClusterIP  

          # Grafana
          helm upgrade --install grafana grafana/grafana \
          --namespace monitoring --create-namespace \
          --set service.type=LoadBalancer \
          --set adminUser=admin \
          --set adminPassword=YourSecurePassword      ##We can change this password to whatever we wan in our environment

